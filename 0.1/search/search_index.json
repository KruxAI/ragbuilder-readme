{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RagBuilder","text":"<p>RagBuilder is a toolkit that helps you create optimal Production-ready Retrieval-Augmented-Generation (RAG) setup for your data automatically. By performing hyperparameter tuning on various RAG parameters (Eg: chunking strategy: semantic, character etc., chunk size: 1000, 2000 etc.), RagBuilder evaluates these configurations against a test dataset to identify the best-performing setup for your data. Additionally, RagBuilder includes several state-of-the-art, pre-defined RAG templates that have shown strong performance across diverse datasets. So just bring your data, and RagBuilder will generate a production-grade RAG setup in just minutes.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Hyperparameter Tuning: Efficiently identify optimal RAG configurations (combination of granular parameters like chunking strategy, chunking size, embedding models, retriever types etc.) using Bayesian optimization</li> <li>Pre-defined RAG Templates: Use state-of-the-art templates that have demonstrated strong performance across various datasets.</li> <li>Evaluation Dataset Options: Choose to generate a synthetic test dataset or provide your own.</li> <li>Automatic Reuse: Automatically re-use previously generated synthetic test data when applicable.</li> <li>Easy-to-use Interface: Intuitive UI to guide you through setting up, configuring, and reviewing your RAG configurations.</li> </ul> Get Started"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#_1","title":"<p>Coming soon</p>","text":""},{"location":"code_of_conduct/","title":"RagBuilder Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [your-email@example.com]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interactions with the people involved, including unsolicited interactions with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interactions with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We are excited to have the community come together to enhance and expand RagBuilder and making it the gold-standard of information-retrieval orchestration &amp; evaluation for LLM apps. Your contributions are invaluable and help make RagBuilder a better resource for developers everywhere.</p>"},{"location":"contributing/#how-can-you-contribute","title":"How Can You Contribute?","text":"<p>We welcome contributions of all kinds and from developers of all levels. Here are several ways you can contribute to RagBuilder:</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<ol> <li>Feature Requests: Suggest and implement new features that can enhance RagBuilder's capabilities.</li> <li>Bug Fixes: Identify and resolve bugs to improve the stability and performance of the tool.</li> <li>Performance Improvements: Optimize the codebase for better speed and efficiency.</li> <li>Documentation: Improve existing documentation or create new documentation to help users better understand and utilize RagBuilder.</li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":"<ol> <li>Unit Tests: Write unit tests to ensure the robustness of individual components.</li> <li>Integration Tests: Develop integration tests to verify the cooperation between different parts of the system.</li> <li>User Testing: Engage in user testing to identify usability issues and areas for improvement.</li> </ol>"},{"location":"contributing/#support-community","title":"Support &amp; Community","text":"<ol> <li>Issue Resolution: Engage with the community to troubleshoot and resolve issues reported on the GitHub issues page.</li> <li>Discussion: Participate in discussions to help shape the future development of RagBuilder.</li> <li>Workshops &amp; Tutorials: Create educational content such as workshops, tutorials, and webinars to help new users get started with RagBuilder.</li> </ol>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the Repository: Start by forking the RagBuilder repository on GitHub.</li> <li>Clone the Repository: Clone your fork to your local machine for development.</li> <li>Create a Branch: Create a new branch for your feature or bug fix.</li> <li>Make Changes: Implement your changes, ensuring to follow the style guidelines and best practices.</li> <li>Run Tests: Make sure all tests pass before submitting your contribution.</li> <li>Submit a Pull Request: Push your branch to GitHub and open a pull request against the main repository. Provide a clear and concise description of the changes you have made.</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By contributing to RagBuilder, you agree to abide by our Code of Conduct, which helps us ensure a welcoming and inclusive environment for everyone.</p> <p>Feel free to reach out to us via GitHub Issues or Discussions if you have any questions or need further assistance. Happy coding!</p>"},{"location":"env/","title":"Environment Variables Setup","text":"<p>This section provides instructions on setting up the environment variables required for the RagBuilder project. These variables need to be configured in a <code>.env</code> file located in the same directory where you run the <code>ragbuilder</code> command.</p>"},{"location":"env/#description","title":"Description","text":"<p>The environment variables are essential for authenticating and configuring various services used by the RagBuilder project. Below are the variables you need to set in your <code>.env</code> file.</p>"},{"location":"env/#environment-variables","title":"Environment Variables","text":"<ul> <li>OPENAI_API_KEY: The API key for OpenAI services.</li> <li>MISTRAL_API_KEY: The API key for Mistral services.</li> <li>ENABLE_ANALYTICS: A boolean flag to enable or disable analytics. Set to <code>True</code> or <code>False</code>.</li> <li>HUGGINGFACEHUB_API_TOKEN: The API token for HuggingFace Hub.</li> <li>COHERE_API_KEY: The API key for Cohere services.</li> <li>JINA_API_KEY: The API key for Jina services.</li> <li>SINGLESTOREDB_URL: The connection string for SingleStoreDB, formatted as <code>userid:password@host:port/dbname</code>.</li> <li>PINECONE_API_KEY: The API key for Pinecone services.</li> </ul>"},{"location":"env/#example-env-file","title":"Example <code>.env</code> File","text":"<p>Create a file named <code>.env</code> in the directory where you will run the <code>ragbuilder</code> command and add the following content, replacing the placeholder values with your actual keys and connection string. Ensure not to use quoutes for keys or values</p> <pre><code># Environment variables for the RagBuilder project\nOPENAI_API_KEY=XXXXXX\nMISTRAL_API_KEY=XXXXX\nENABLE_ANALYTICS=True\nHUGGINGFACEHUB_API_TOKEN=XXXXXX\nCOHERE_API_KEY=XXXXXX\nJINA_API_KEY=XXXXXX\nSINGLESTOREDB_URL=userid:password@host:port/dbname\nPINECONE_API_KEY=XXXXXX\n</code></pre>"},{"location":"env/#instructions","title":"Instructions","text":"<ol> <li>Create a new file named .env in your project directory.</li> <li>Copy the example content provided above into the .env file.</li> <li>Replace the placeholder values with your actual API keys and connection string.</li> <li>Save the .env file.</li> <li>Ensure that the .env file is located in the same directory where you run the ragbuilder command to ensure the environment variables are properly loaded.</li> </ol> <p>By setting up these environment variables, you enable the RagBuilder project to authenticate and interact with the necessary external services.</p>"},{"location":"faq/","title":"RagBuilder FAQ","text":"What is RagBuilder? <p>RagBuilder is a toolkit that helps you create optimal Production-ready Retrieval-Augmented-Generation (RAG) setup for your data automatically. By performing hyperparameter tuning on various RAG parameters (e.g., chunking strategy: semantic, character, etc., chunk size: 1000, 2000, etc.), RagBuilder evaluates these configurations against a test dataset to identify the best-performing setup for your data.</p> How do I get started with RagBuilder? <p>To get started, follow these steps: 1. Use the install script for easy installation:</p> <pre><code>#### Mac &amp; Linux\n```sh\ncurl -fsSL https://raw.githubusercontent.com/KruxAI/ragbuilder-readme/main/install.sh | bash\n```\n\n#### Windows\n```sh\ncurl -fsSL https://raw.githubusercontent.com/KruxAI/ragbuilder-readme/main/install.bat\n```\n\nRun `install.bat` from the command prompt\n```sh\ninstall.bat\n```\n</code></pre> <ol> <li> <p>Setup your OpenAI API key.</p> <p>On MacOS and Linux: <pre><code>export OPENAI_API_KEY=XXXXX\n</code></pre></p> <p>On Windows: <pre><code>set OPENAI_API_KEY=XXXXX\n</code></pre></p> </li> <li> <p>Run <code>ragbuilder</code> in your terminal. This will open up the RagBuilder app in the browser. This will start the RagBuilder Uvicorn app and open the browser. If the browser window doesn't open automatically, go to http://localhost:8005/ in your browser to access the RagBuilder dashboard. For Docker, see Installation</p> </li> <li> <p>Click on New Project and input the path of the source dataset for your RAG and follow the rest of the instructions.</p> </li> <li> <p>After completion, view the results summary page to see what configurations performed best for your dataset. You may then get the code for the desired configuration by clicking on the View Code button.</p> </li> </ol> <p>You can find more detailed instructions in our Getting Started Guide.</p> Can I use RagBuilder with my own data? <p>Yes, RagBuilder is designed to work with your custom datasets. Simply point to your data, configure the necessary parameters, and let RagBuilder do the rest.</p> What are the pre-defined RAG templates? <p>The pre-defined RAG templates include various state-of-the-art configurations that have shown strong performance across different datasets. These templates offer a quick and effective way to get started with RagBuilder.</p> What does Bayesian optimization mean in RagBuilder? <p>When you select the Bayesian optimization, RagBuilder performs hyperparameter tuning using the Bayesian logic, on the different parameters of the RAG such as chunking strategy, chunk size, embedding model, retriever, etc. It begins by evaluating a few random sets of configurations, then builds a probabilistic model (typically a Gaussian process) to approximate the objective function, which is the RAG's performance. An acquisition function is used to balance exploration of new hyperparameter areas and exploitation of known good areas. This function guides the selection of the next set of hyperparameters to evaluate. The process is iterative, with each new evaluation refining the model and improving the efficiency of finding optimal hyperparameters.</p> How long does it take to generate a RAG pipeline? <p>The time RagBuilder takes depends heavily on your dataset and the configuration that you run it with. Using pre-defined templates can take just minutes, while creating custom configurations may take longer depending on the complexity and size of your data. We recommend starting with a sample dataset (maybe start with 10-50K words) and review the results before scaling with your full dataset. It'll take approximately 30-60 mins for RagBuilder to complete a Bayesian optimization run + pre-defined templates with a sample dataset of 50K words.</p> How is RagBuilder different from other RAG tools? <p>RagBuilder stands out by offering automated hyperparameter tuning, state-of-the-art pre-defined templates, and the ability to handle custom datasets with ease. It aims to simplify the process of building and deploying RAG pipelines, making them accessible to developers of all skill levels.</p> Where can I ask questions or get help? <p>For any questions or help, you can: - Visit our Discussion Board - Check our Documentation</p> Is RagBuilder open source? <p>Yes, RagBuilder is an open-source project. You can access the source code, contribute, and join the community on our GitHub Repository.</p> How do I contribute to RagBuilder? <p>We welcome contributions of all kinds and from developers of all levels. You can contribute by: - Reporting bugs - Suggesting new features or improvements - Contributing code or documentation - Participating in community discussions</p> <p>For more details, please visit our Contributors Page.</p> Who maintains RagBuilder? <p>RagBuilder is maintained by Krux AI (Ashwin Aravind - ashwin@krux.ai and Aravind Parameswaran - aravind@krux.ai) along with contributions from the open-source community. We welcome and appreciate contributions from developers worldwide.</p> <p>Have more questions? Visit our Discussion Board or Contact Us.</p>"},{"location":"license/","title":"License","text":"<p>Copyright 2024 Krux AI</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"quickstart/","title":"Getting Started","text":"<p>RagBuilder is a toolkit that helps you create optimal Production-ready Retrieval-Augmented-Generation (RAG) setup for your data automatically. By performing hyperparameter tuning on various RAG parameters (Eg: chunking strategy: semantic, character etc., chunk size: 1000, 2000 etc.), RagBuilder evaluates these configurations against a test dataset to identify the best-performing setup for your data. Additionally, RagBuilder includes several state-of-the-art, pre-defined RAG templates that have shown strong performance across diverse datasets. So just bring your data, and RagBuilder will generate a production-grade RAG setup in just minutes.</p>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#option-1-install-using-pip","title":"Option 1: Install using pip:","text":"<pre><code>pip install ragbuilder\n</code></pre>"},{"location":"quickstart/#set-your-openai-api-key","title":"Set your OpenAI API key","text":"<p>Make sure your OpenAI API key is available by setting it as an environment variable. Note that you have to also set other keys for relevant services if you're going to use them (For eg: Pinecone, Singlestore etc.).  Alternatively, use the .env file to specify keys. See Environment Variables Setup for more details.</p> MacOS/ LinuxWindows <pre><code>export OPENAI_API_KEY=XXXXX\n</code></pre> <pre><code>set OPENAI_API_KEY=XXXXX\n</code></pre> <p>Now, run ragbuilder on your command line:</p> <pre><code>ragbuilder\n</code></pre> <p>This will start the Ragbuilder Uvicorn app and open the browser. If the browser window doesn't open automatically, go to http://localhost:8005/ in your browser to access the RagBuilder dashboard.</p>"},{"location":"quickstart/#option-2-using-prebuilt-docker-image","title":"Option 2: Using Prebuilt Docker Image","text":"<p>Pull docker image from Docker hub <pre><code>docker pull ashwinzyx/ragbuilder:latest\n</code></pre></p> <p>Run the Docker Container. Provide env variables using command line <pre><code>docker run  -p 55003:8005  -e OPENAI_API_KEY=sk-....\n</code></pre></p> <p>OR </p> <p>Create .env as specified in the Environment Variables Setup section and use it while running the container <pre><code>docker run --env-file .env -p 55003:8005 ragbuilder\n</code></pre></p> <p>This will start the Ragbuilder Uvicorn app and open the browser. If the browser window doesn't open automatically, go to http://localhost:55003/ in your browser to access the RagBuilder dashboard.</p>"},{"location":"quickstart/#creating-your-first-rag-using-ragbuilder","title":"Creating your first RAG using ragbuilder","text":"<p>Getting started is super easy.  To create a new project,</p> <ol> <li>Click New Project to start building your RAG.</li> <li>Description: Describe your use-case. Let's specify \"Q&amp;A Chatbot\" as the description for our demo.</li> <li>Source Data: Specify the path to your source data. This could be a URL, local directory or local file path. For the sake of our demo, let's specify the URL: https://lilianweng.github.io/posts/2023-06-23-agent/</li> <li>Select Ragbuilder options: </li> <li>Use Pre-defined RAG Templates - When selected, this'll include pre-defined RAG configuration templates that have demonstrated strong performance across various datasets and related use-cases. These templates will be evaluated against your data, providing you with performance metrics for each pre-defined configuration.</li> <li>Create Custom RAG Configurations - When selected, this'll generate multiple RAG configurations based on detailed parameters like chunking strategy, chunking size, embedding model, retriever type etc. With this option, it is recommended that you opt for the Bayesian optimization option to efficiently identify the near-optimal RAG configuration for your data. More about this in a bit.*</li> <li>Next, in order to tailor your RAG configurations, you can unselect any specific options you wish to exclude (For eg: Unselecting \"Chunking Strategy: Character\" will exclude all RAG configurations that have the CharacterTextSplitter). For best results, you may want to leave all settings unchanged. But for our Quickstart demo, we will unselect everything except the below:<ul> <li>Chunking strategy: Markdown</li> <li>Embedding model: text-embedding-3-large</li> <li>Retriever: Vector DB - Similarity Search</li> <li>Top k: 5</li> <li>LLM: GPT-3.5 Turbo</li> </ul> </li> <li>Select optimization approach:<ul> <li>Bayesian optimization (Recommended): When you select the Bayesian optimization, RagBuilder performs hyperparameter tuning using the Bayesian logic, on the different parameters of the RAG such as chunking strategy, chunk size, embedding model, retriever, etc. It begins by evaluating a few random sets of configurations, then builds a probabilistic model to approximate the objective function, which is the RAG's performance. An acquisition function is used to balance exploration of new hyperparameter areas and exploitation of known good areas. This function guides the selection of the next set of hyperparameters to evaluate. The process is iterative, with each new evaluation refining the model and improving the efficiency of finding optimal hyperparameters.</li> <li>Run all Combinations: This option runs all possible combinations of the options selected, offering a comprehensive performance analysis of all RAG configurations for your dataset. This option is appropriate if you have a small subset of options that you're considering for your RAG (For eg: 1 specific chunking strategy, chunk size, 1-2 retrievers etc.). Otherwise, this option can be resource intensive as it may yield hundreds or even thousands of unique configurations to compare. [Note]: This may take several minutes to complete.</li> </ul> </li> <li>Next, in Evaluation dataset options, you have the option to:<ul> <li>Use Existing Synthetic Test Data: If synthetic test data was previously generated for your dataset, this option will appear alongside the path of the existing test data.</li> <li>Generate Synthetic Test Data from My Dataset: Create a new synthetic test dataset based on your existing data.</li> <li>Provide a Manually Created Test Dataset: Use your own test dataset file (CSV format with \"question\" and \"ground_truth\" columns). For our demo, let's go ahead and create a synthetic test data by selecting the Generate Synthetic Test Data** option.</li> </ul> </li> <li>Before running the tool, let's review all your selections:</li> <li>Review all the selections and click Confirm</li> <li>After processing we should see the dashboard with the results.</li> <li>Click the View Code snippet option in the results screen to get the code snippet of the desired RAG configuration. And voila, you've cut down several weeks/months of effort manually creating and evaluating different RAG configuration for your dataset.</li> </ol>"}]}